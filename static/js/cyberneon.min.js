// CyberNeon CTFd Theme - Interactive JavaScript

class CyberNeonTheme {
  constructor() {
    this.init();
  }

  init() {
    this.setupNavigation();
    this.setupAnimations();
    this.setupParticleNetwork();
    this.setupGlitchEffects();
    this.setupNeuralConnections();
    this.setupScrollEffects();
  }

  setupNavigation() {
    const navToggle = document.getElementById('nav-toggle');
    const navMenu = document.getElementById('nav-menu');

    if (navToggle && navMenu) {
      navToggle.addEventListener('click', () => {
        navToggle.classList.toggle('active');
        navMenu.classList.toggle('active');
      });

      // Close menu when clicking on a link (mobile)
      navMenu.addEventListener('click', (e) => {
        if (e.target.classList.contains('nav-link')) {
          navToggle.classList.remove('active');
          navMenu.classList.remove('active');
        }
      });
    }
  }

  setupAnimations() {
    // Intersection Observer for scroll animations
    const observerOptions = {
      threshold: 0.1,
      rootMargin: '0px 0px -50px 0px'
    };

    const observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          entry.target.classList.add('fade-in');
        }
      });
    }, observerOptions);

    // Observe challenge cards
    document.querySelectorAll('.challenge-card').forEach(card => {
      observer.observe(card);
    });

    // Observe table rows
    document.querySelectorAll('.table-row').forEach(row => {
      observer.observe(row);
    });
  }

  setupParticleNetwork() {
    const particleContainer = document.querySelector('.particle-network');
    if (!particleContainer) return;

    // Create interactive particles
    const particles = [];
    const particleCount = 80;
    
    class Particle {
      constructor() {
        this.x = Math.random() * window.innerWidth;
        this.y = Math.random() * window.innerHeight;
        this.vx = (Math.random() - 0.5) * 0.5;
        this.vy = (Math.random() - 0.5) * 0.5;
        this.size = Math.random() * 3 + 1;
        this.color = this.getRandomColor();
        this.element = this.createElement();
      }
      
      getRandomColor() {
        const colors = ['#00d4ff', '#b400ff', '#39ff14', '#ff0080', '#ff6b00'];
        return colors[Math.floor(Math.random() * colors.length)];
      }
      
      createElement() {
        const el = document.createElement('div');
        el.style.cssText = `
          position: absolute;
          width: ${this.size}px;
          height: ${this.size}px;
          background: ${this.color};
          border-radius: 50%;
          box-shadow: 0 0 10px ${this.color};
          pointer-events: none;
          transition: all 0.3s ease;
        `;
        particleContainer.appendChild(el);
        return el;
      }
      
      update() {
        this.x += this.vx;
        this.y += this.vy;
        
        // Bounce off edges
        if (this.x <= 0 || this.x >= window.innerWidth) this.vx *= -1;
        if (this.y <= 0 || this.y >= window.innerHeight) this.vy *= -1;
        
        // Keep within bounds
        this.x = Math.max(0, Math.min(window.innerWidth, this.x));
        this.y = Math.max(0, Math.min(window.innerHeight, this.y));
        
        this.element.style.transform = `translate(${this.x}px, ${this.y}px)`;
      }
    }
    
    // Create particles
    for (let i = 0; i < particleCount; i++) {
      particles.push(new Particle());
    }
    
    // Animation loop
    const animate = () => {
      particles.forEach(particle => particle.update());
      requestAnimationFrame(animate);
    };
    animate();
    
    // Handle window resize
    window.addEventListener('resize', () => {
      particles.forEach(particle => {
        if (particle.x > window.innerWidth) particle.x = window.innerWidth;
        if (particle.y > window.innerHeight) particle.y = window.innerHeight;
      });
    });
  }

  setupNeuralConnections() {
    const connectionsContainer = document.querySelector('.neural-connections');
    if (!connectionsContainer) return;

    // Create connection lines between nearby particles
    setInterval(() => {
      const particles = document.querySelectorAll('.particle-network > div');
      const connections = [];
      
      particles.forEach((p1, i) => {
        particles.forEach((p2, j) => {
          if (i < j) {
            const rect1 = p1.getBoundingClientRect();
            const rect2 = p2.getBoundingClientRect();
            const distance = Math.sqrt(
              Math.pow(rect1.left - rect2.left, 2) + 
              Math.pow(rect1.top - rect2.top, 2)
            );
            
            if (distance < 150) {
              connections.push({
                x1: rect1.left,
                y1: rect1.top,
                x2: rect2.left,
                y2: rect2.top,
                opacity: 1 - (distance / 150)
              });
            }
          }
        });
      });
      
      // Draw connections using CSS
      connectionsContainer.innerHTML = '';
      connections.forEach(conn => {
        const line = document.createElement('div');
        const length = Math.sqrt(Math.pow(conn.x2 - conn.x1, 2) + Math.pow(conn.y2 - conn.y1, 2));
        const angle = Math.atan2(conn.y2 - conn.y1, conn.x2 - conn.x1) * 180 / Math.PI;
        
        line.style.cssText = `
          position: absolute;
          width: ${length}px;
          height: 1px;
          background: linear-gradient(90deg, transparent, rgba(0, 212, 255, ${conn.opacity * 0.3}), transparent);
          left: ${conn.x1}px;
          top: ${conn.y1}px;
          transform-origin: 0 0;
          transform: rotate(${angle}deg);
          pointer-events: none;
        `;
        connectionsContainer.appendChild(line);
      });
    }, 100);
  }

  setupGlitchEffects() {
    // Enhanced glitch effect for titles
    document.querySelectorAll('.glitch-text').forEach(element => {
      element.addEventListener('mouseenter', () => {
        element.style.animation = 'glitch 0.3s ease-in-out 3';
      });

      element.addEventListener('animationend', () => {
        element.style.animation = 'neonPulse 2s ease-in-out infinite';
      });
    });
  }

  setupParticles() {
    const particlesContainer = document.querySelector('.glow-particles');
    if (!particlesContainer) return;

    // Create floating particles
    for (let i = 0; i < 20; i++) {
      const particle = document.createElement('div');
      particle.className = 'particle';
      particle.style.cssText = `
        position: absolute;
        width: 2px;
        height: 2px;
        background: var(--cyber-blue);
        border-radius: 50%;
        left: ${Math.random() * 100}%;
        top: ${Math.random() * 100}%;
        box-shadow: 0 0 10px var(--cyber-blue);
        animation: particleFloat ${10 + Math.random() * 10}s linear infinite;
        animation-delay: ${Math.random() * 5}s;
      `;
      
      particlesContainer.appendChild(particle);
    }
  }

  setupScrollEffects() {
    // Parallax effect for background
    window.addEventListener('scroll', () => {
      const scrolled = window.pageYOffset;
      const parallaxElements = document.querySelectorAll('.cyber-bg');
      
      parallaxElements.forEach(element => {
        const speed = 0.5;
        element.style.transform = `translateY(${scrolled * speed}px)`;
      });
    });

    // Navbar background opacity on scroll
    const navbar = document.querySelector('.cyber-navbar');
    if (navbar) {
      window.addEventListener('scroll', () => {
        const scrolled = window.pageYOffset;
        const opacity = Math.min(scrolled / 100, 0.95);
        navbar.style.background = `rgba(10, 10, 20, ${opacity})`;
      });
    }
  }

  // Utility methods
  static addGlowEffect(element, color = 'var(--cyber-blue)') {
    element.style.boxShadow = `0 0 20px ${color}`;
    element.style.transition = 'box-shadow 0.3s ease';
  }

  static typeWriter(element, text, speed = 50) {
    element.textContent = '';
    let i = 0;
    
    const type = () => {
      if (i < text.length) {
        element.textContent += text.charAt(i);
        i++;
        setTimeout(type, speed);
      }
    };
    
    type();
  }
}

// Initialize theme when DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
  new CyberNeonTheme();
  
  // Add loading complete class
  setTimeout(() => {
    document.body.classList.add('loaded');
  }, 100);
});

// Challenge card interactions
document.addEventListener('click', (e) => {
  if (e.target.closest('.challenge-card')) {
    const card = e.target.closest('.challenge-card');
    card.style.transform = 'scale(0.98)';
    setTimeout(() => {
      card.style.transform = '';
    }, 150);
  }
});

// Smooth scrolling for anchor links
document.querySelectorAll('a[href^="#"]').forEach(anchor => {
  anchor.addEventListener('click', function (e) {
    e.preventDefault();
    const target = document.querySelector(this.getAttribute('href'));
    if (target) {
      target.scrollIntoView({
        behavior: 'smooth',
        block: 'start'
      });
    }
  });
});

// Add cyber scanning effect to tables
document.querySelectorAll('.table-row').forEach((row, index) => {
  row.addEventListener('mouseenter', () => {
    row.style.background = 'rgba(0, 212, 255, 0.1)';
    row.style.boxShadow = 'inset 0 0 20px rgba(0, 212, 255, 0.2)';
  });

  row.addEventListener('mouseleave', () => {
    row.style.background = '';
    row.style.boxShadow = '';
  });
});

// Dynamic challenge card sorting
function sortChallenges(criteria) {
  const grid = document.querySelector('.challenges-grid');
  if (!grid) return;

  const cards = Array.from(grid.children);
  
  cards.sort((a, b) => {
    switch (criteria) {
      case 'value':
        return parseInt(b.dataset.value) - parseInt(a.dataset.value);
      case 'name':
        return a.querySelector('.challenge-name').textContent.localeCompare(
          b.querySelector('.challenge-name').textContent
        );
      default:
        return 0;
    }
  });

  cards.forEach((card, index) => {
    card.style.animation = 'none';
    card.offsetHeight; // Trigger reflow
    card.style.animation = `slideInUp 0.6s ease-out ${index * 0.1}s both`;
    grid.appendChild(card);
  });
}

// Cyber terminal typing effect for descriptions
function cyberType(element, text, speed = 30) {
  element.textContent = '';
  let i = 0;
  
  const cursor = document.createElement('span');
  cursor.textContent = '█';
  cursor.style.cssText = `
    color: var(--cyber-green);
    animation: blink 1s infinite;
  `;
  element.appendChild(cursor);

  const type = () => {
    if (i < text.length) {
      element.textContent = text.substring(0, i + 1);
      element.appendChild(cursor);
      i++;
      setTimeout(type, speed);
    } else {
      cursor.remove();
    }
  };

  type();
}

// Add blinking cursor animation
const blinkStyle = document.createElement('style');
blinkStyle.textContent = `
  @keyframes blink {
    0%, 50% { opacity: 1; }
    51%, 100% { opacity: 0; }
  }
`;
document.head.appendChild(blinkStyle);

// Performance optimization for animations
let ticking = false;

function updateAnimations() {
  // Throttle expensive operations
  if (!ticking) {
    requestAnimationFrame(() => {
      // Update particle positions, glow effects, etc.
      ticking = false;
    });
    ticking = true;
  }
}

window.addEventListener('scroll', updateAnimations);
window.addEventListener('resize', updateAnimations);

// Add easter egg - Konami code
let konamiCode = '';
const konamiSequence = 'ArrowUpArrowUpArrowDownArrowDownArrowLeftArrowRightArrowLeftArrowRightKeyBKeyA';

document.addEventListener('keydown', (e) => {
  konamiCode += e.code;
  
  if (konamiCode === konamiSequence) {
    // Easter egg: Ultra cyber mode
    document.body.classList.add('ultra-cyber');
    
    // Add ultra cyber styles
    const ultraStyle = document.createElement('style');
    ultraStyle.textContent = `
      .ultra-cyber {
        filter: hue-rotate(180deg) saturate(1.5);
      }
      .ultra-cyber .glitch-text {
        animation: glitch 0.1s ease-in-out infinite;
      }
    `;
    document.head.appendChild(ultraStyle);
    
    setTimeout(() => {
      document.body.classList.remove('ultra-cyber');
      ultraStyle.remove();
    }, 10000);
    
    konamiCode = '';
  } else if (!konamiSequence.startsWith(konamiCode)) {
    konamiCode = '';
  }
});